66. Plus One
数组最后一位+1
    public int[] plusOne(int[] digits) {
        boolean plus = true;
        for (int i = digits.length - 1; i >= 0; i--) {
            if (plus ) {
                if (++digits[i] > 9) {
                    digits[i] = 0;
                } else plus = false;
            }
            if (!plus) break;
        }

        if (plus) {
            int[] newPlus = new int[digits.length + 1];
            newPlus[0] = 1;
            return newPlus;
        }
        return digits;
    }

=====
119. Pascal's Triangle II
输出第k行杨辉三角
    public static List<Integer> getRow(int rowIndex) {
        Integer[] row = new Integer[rowIndex + 1];
        Arrays.fill(row, 0);
        row[0] = 1;
        for (int i = 1; i < row.length; i++) {
            for (int j = i; j >= 1; j--) {
                row[j] += row[j - 1];
            }
        }
        return Arrays.asList(row);
    }
=====
561. Array Partition I
给2n个integers,group这些integers到n对，使得这n对的min(a,b)最大
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for (int i = 0; i < nums.length; i += 2) {
            result += nums[i];
        }
        return result;
    }

=====
1. Two Sum
给一个整形数组，一个target，返回加起来等于target的元素的下标
使用hashmap保存之前的需要对比的数。
public int[] twoSum(int[] numbers, int target) {
    int[] result = new int[2];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < numbers.length; i++) {
        if (map.containsKey(target - numbers[i])) {
            result[0] = map.get(target - numbers[i]);
            result[1] = i;
            return result;
        }
        map.put(numbers[i], i);
    }
    return result;
}
=====
448. Find All Numbers Disappeared in an Array
给定一个大小为n的整形数组1<=a[i]<=n,一些出现两次，一些出现一次，在数组中找出所有没有出现过的的[1,n]的元素
使用负数进行标注可以进行顺序判断。
使用0、-1进行标注，则下一个被判断的下标必须为被标注的数组元素的值。

List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> ret = new ArrayList<Integer>();
        for(int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]) - 1;
            if(nums[val] > 0) {
                nums[val] = -nums[val];
            }
        }
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] > 0) {
                ret.add(i+1);
            }
        }
        return ret;
    }
=====
167. Two Sum II - Input array is sorted
给定一个已经按升序排列的整形数组，找到两个加起来等于target的数。返回这两个数的数组下标，index1必须小于index2.
    public int[] twoSum(int[] numbers, int target) {
        int index1 = 0;
        int index2 = numbers.length - 1;
        while (index1 < index2) {
            int sum = numbers[index1] + numbers[index2];
            if (sum == target) break;
            else if (sum > target) {
                index2--;
            } else if (sum < target) {
                index1++;
            }
        }

        return new int[] { index1 + 1, index2 + 1 };
    }

=====
26. Remove Duplicates from Sorted Array
给定一个大小为n的已排序数组，删除重复的地方，使每个元素只出现一次，并返回新的长度。
    public static int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;
        int last = nums[0];
        int duplicate = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != last) {
                nums[duplicate] = nums[i];
                last = nums[i];
                duplicate++;
            }
        }
        return duplicate;
    }
   public static int removeDuplicates2(int[] A) {
        if (A.length==0) return 0;
        int j=0;
        for (int i=0; i<A.length; i++)
            if (A[i]!=A[j]) A[++j]=A[i];
        return ++j;
    }

=====
27. Remove Element
给定一个数组和一个值，删除该值的所有实例，并返回新的长度
    public int removeElement(int[] nums, int val) {
        int duplicate = 0;
        for (int i = 0; i < nums.length; i++) {
             if (nums[i] != val) {
                 nums[duplicate] = nums[i];
                 duplicate++;
             }
        }
        return duplicate;
    }

=====
169. Majority Element
给定一个大小为n的数组，找到出现大于[n/2]次数的元素。
    public int majorityElement(int[] nums) {
        int k = sort(nums, 0, nums.length - 1, (nums.length - 1) / 2);
        while (nums[nums.length / 2] != nums[k]) {
            k = sort(nums, 0, nums.length - 1, (nums.length - 1) / 2);
        }
        return nums[k];
    }

    public int sort(int[] nums, int i, int j, int k) {
        int key = nums[k];
        nums[k] = nums[i];
        nums[i] = key;
        while (i < j) {
            while (i < j && nums[j] >= key)
                j--;
            if (i < j) nums[i++] = nums[j];
            while (i < j && nums[i] < key)
                i++;
            if (i < j) nums[j--] = nums[i];
        }
        nums[i] = key;
        return i;
    }

===
    public int majorityElement(int[] nums) {
        int major = nums[0];
        int count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == major) count++;
            else if (nums[i] != major) {
                if(count == 0) {
                    major = nums[i];
                    count++;
                } else {
                    count--;
                }
            }
        }
        return major;
    }

=====
581. Shortest Unsorted Continuous Subarray
给定一个整形数组，你需要找到一个连续子数组满足：如果这个子数组按升序排列，那么整个数组就能按升序排列。（找到最短子数组）
    public int findUnsortedSubarray(int[] nums) {
        int start = -1;
        int end = -2;
        int max = nums[0];
        int min = nums[nums.length - 1];
        for (int i = 1; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            min = Math.min(min, nums[nums.length - i - 1]);
            if (nums[i] < max) end = i;
            if (nums[nums.length - i - 1] > min) start = nums.length - i - 1;
        }
        return end - start + 1;
    }
10=====
566. Reshape the Matrix
m*n矩阵转换为r*c的矩阵
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int rows = nums.length;
        int cols = nums[0].length;
        if (rows * cols != r * c) return nums;
        int[][] newMatrix = new int[r][c];
        for (int i = 0; i < r * c; i++) {
            newMatrix[i / c][i % c] = nums[i / cols][i % cols];
        }
        return newMatrix;
    }
=====
35. Search Insert Position
给定一个已经排序的数组和定值，输出它所在的位置或者它应该插入的位置。
(最后一次的start就应该是它该在的位置)
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        int mid = 0;
        while (start <= end) {
            mid = (start + end) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) start = mid + 1;
            else end = mid - 1;
        }
	return start;
    }
======
88. Merge Sorted Array
给定两个已经排序的整形数组nums1和nums2，将两个数组整合（可以认为nums1的长度足够大）
public int findPairs(int[] nums, int k) {

    }
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int t1 = m - 1;
        int t2 = n - 1;
        for (int i = (m + n - 1); i >= 0; i--) {
            if (t1 < 0) {
                nums1[i] = nums2[t2--];
            } else if (t2 < 0) {
                nums1[i] = nums1[t1--];
            } else if (nums1[t1] > nums2[t2]) {
                nums1[i] = nums1[t1--];
            } else {
                nums1[i] = nums2[t2--];
            }
        }
    }

=====
414. Third Maximum Number
给定一个非空整形数组,返回这个数组第三大的数,如果不存在,返回最大的数.(必须O(n))
(给出一个例子,如何初始化一个区别于任何int数值的int型变量, 使用Integer)

    public static int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = nupublic int findPairs(int[] nums, int k) {

    }ll;
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3)) continue;
            if (max1 == null || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == null || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == null || n > max3) {
                max3 = n;
            }
        }
        return max3 == null ? max1 == null ? -1 : max1 : max3;
    }
======
628. Maximum Product of Three Numbers
给定一个整型数组,找到乘积最大的三个数.
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int positive = nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3];
        int negative = nums[0] * nums[1] * nums[nums.length - 1];
        return Math.max(positive, negative);
    }
15=====
643. Maximum Average Subarray I
给定一个包含n个整形数的数组,找到连续的子数组长度为k有着最大的平均值.输出最大的平均值.
    public static double findMaxAverage(int[] nums, int k) {
        int window = 0;
        for (int i = 0; i < k; i++) {
            window += nums[i];
        }
        double max = window;
        double count = window;
        for (int i = 0; i < nums.length - k; i++) {
            count = count - nums[i] + nums[i + k];
            if (count > max) max = count;
        }
        return max / k;
    }
=====
283. Move Zeroes
给定一个数组,移动所有的0到数组最后并保持所有非0元素的相对位置.
    public static void moveZeroes(int[] nums) {
        int nonZeroIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[nonZeroIndex] = nums[i];
                nonZeroIndex++;
            }
        }
        for (int i = nonZeroIndex; i < nums.length; i++) {
            nums[i] = 0;
        }
    }
=====
532. K-diff Pairs in an Array
给定一个整形数组和一个整数k,找到绝对差等于k共有几对.
(给定范围的统计用hash表)
(没有给定范围的统计用hashMap)
    public int findPairs(int[] nums, int k) {
        if (nums == null || nums.length == 0 || k < 0)   return 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        Set<Integer> set = map.keySet();
        int count = 0;
        for (int tmp : set) {
            if (k == 0 && map.getOrDefault(tmp, 0) >= 2) count++;
            else if (k != 0 && map.getOrDefault(tmp + k, 0) != 0) count++;
        }
        return count;
    }
=====
(x)122. Best Time to Buy and Sell Stock II
有一个数组,第i个元素是day i的股票价格.
设计一个算法找出最大的利润,可以进行尽可能多的交易,但是必须卖出后再进行新的交易.
    public static int maxProfit(int[] prices) {
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            int thisProfit = prices[i] - prices[i - 1];
            if (thisProfit > 0) {
                max += thisProfit;
            }
        }
        return max;
    }
=====
605. Can Place Flowers
假设你有一个很长的花坛，部分地块种植和一些不。然而，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。给定一个数组,0表示没有种植,1表示已经种植,和一个数字N,返回是否能再种植N个.
(略)
=====
121. Best Time to Buy and Sell Stock
第i个元素为第i天的股票价格,只能买卖一次,求最大的利润.
    public int maxProfit(int[] prices) {
        int buy = 0;
        int sell = 0;
        int maxProfit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < prices[buy]) {
                buy = i;
                sell = i;
            }
            if (prices[i] > prices[sell]) sell = i;
            if (prices[sell] - prices[buy] > maxProfit) maxProfit = prices[sell] - prices[buy];
        }
        return maxProfit;
    }
=====
219. Contains Duplicate II
给定一个整型数组和一个整数k,找出是否存在下标是i和j的元素num[i] = num[j]
且i和j的差值最大是k.
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            Integer save = map.get(nums[i]);
            if (save == null) map.put(nums[i], i);
            else if (i - save <= k) return true;
            else map.put(nums[i], i);//***im
        }
        return false;
    }
=====
217. Contains Duplicate
给定一个整型数组,找出是否含有重复的数字,如果出现两次以上返回true
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0 ; i < nums.length; i++) {
            if (! set.add(nums[i])) {
                return true;
            }
        }
        return false;
    }
===
53. Maximum Subarray
找到数组的最大子数组
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int thisMax = 0;

        for (int i = 0; i < nums.length; i++) {
            thisMax += nums[i];
            if (thisMax > max) max = thisMax;
            if (thisMax < 0) thisMax = 0;
        }
        return max;
    }
=====
118. Pascal's Triangle
返回杨辉三角的第i行
	public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> allList = new ArrayList<>();
        if (numRows < 1) return allList;
        List<Integer> next = new ArrayList<>();
        next.add(1);
        allList.add(next);
        for (int i = 2; i <= numRows; i++) {
            next = getNextRow(next);
            allList.add(next);
        }
        return allList;
    }

    public List<Integer> getNextRow(List<Integer> list) {
        List<Integer> nextList = new ArrayList<>();
        nextList.add(1);
        for (int i = 1; i < list.size(); i++) {
            nextList.add(list.get(i) + list.get(i - 1));
        }
        nextList.add(1);
        return nextList;
    }
=====
485. Max Consecutive Ones
给定一个二进制数组,找出连续的1最大的长度.
    public int findMaxConsecutiveOnes(int[] nums) {
        int max = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) count = 0;
            else count++;
            if (count > max){
                max = count;
            }
        }
        return max;
    }

=====
268. Missing Number
给定一个数组包含n个不同的数字,范围从0,1,2...n,找出那个消失的数字.
    public int missingNumber(int[] nums) {
        int xor = 0;
        for (int i = 0; i < nums.length; i++) {
            xor ^= i ^ nums[i];
        }
        return xor ^ nums.length;
    }
=====
189. Rotate Array
用k步旋转一个n个元素的数组
    public void rotate(int[] nums, int k) {
        if (k > nums.length) k %= nums.length;
        if (k == 0) return;
        Stack<Integer> stack = new Stack<>();
        for (int i = nums.length - 1; i >= nums.length - k; i--) {
            stack.push(nums[i]);
        }
        for (int i = nums.length - k - 1; i >= 0; i--) {
            nums[i + k] = nums[i];
        }
        for (int i = 0; i < k; i++) {
            nums[i] = stack.pop();
        }
    }


==============Medium
209. Minimum Size Subarray Sum
给定一个n个整数的和一个正数s,找出最小的子数组长度满足sum>=s,如果没有,返回0;
//SubArray推进算法
    public int minSubArrayLen(int s, int[] nums) {
        int minLength = nums.length + 1;
        int sum = 0, start = 0, end = 0;
        while (end < nums.length) {
            sum += nums[end];
            if (sum >= s) {
                while (sum - nums[start] >= s) {
                    sum -= nums[start++];
                }
                if (end - start + 1 < minLength) minLength = end - start + 1;
            }
            end++;
        }
        return minLength > nums.length ? 0 : minLength;
    }

=====
18. 4Sum
在数组中找出所有的4个数和等于target的组合
//用的是sum2的方法.
public static List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> all = new ArrayList<>();
        if (nums == null || nums.length == 0) return all;
        Arrays.sort(nums);
        sumHelper(nums, target, all);
        return all;
    }

    public static void sumHelper(int[] nums, int target, List<List<Integer>> all) {
        for (int first = 0; first < nums.length - 3; first++) {
            if (first != 0 && nums[first] == nums[first - 1]) continue;
            for (int second = first + 1; second < nums.length - 2; second++) {
                if (second != first + 1 && nums[second] == nums[second - 1]) continue;
                int remain = target - (nums[first] + nums[second]);
                int start = second + 1;
                int end = nums.length - 1;
                while (start < end) {
                    int[] find = sum2Sorted(nums, remain, start, end);
                    if (find != null) {
                        List<Integer> list = new ArrayList<>();
                        list.add(nums[first]);
                        list.add(nums[second]);
                        list.add(nums[find[0]]);
                        list.add(nums[find[1]]);
                        all.add(list);
                        while (find[0] < find[1] && nums[find[0]] == nums[find[0] + 1]) find[0]++;
                        while (find[0] < find[1] && nums[find[1]] == nums[find[1] - 1]) find[1]--;
                        start = find[0] + 1;
                        end = find[1] - 1;
                    } else break;
                }
            }
        }
    }

    public static int[] sum2Sorted(int[] nums, int sum, int start, int end) {
        while (start < end) {
            int tSum = nums[start] + nums[end];
            if (tSum == sum) return new int[]{start, end};
            else if (tSum > sum) end--;
            else start++;
        }
        return null;
    }

=====
16. 3Sum Closest
在数组中找出和target最近的三个数的和
//用的是sum2的方法.
    public static int threeSumClosest(int[] nums, int target) {
        if (nums == null || nums.length < 3) return 0;
        Arrays.sort(nums);
        int closest = nums[0] + nums[1] + nums[2];
        for (int locate = 0; locate < nums.length - 2; locate++) {
            int close = sum2SortedClosest(nums, target - nums[locate], locate + 1, nums.length - 1);
            if (Math.abs(target - closest) > Math.abs(target - close - nums[locate])) closest = close + nums[locate];
        }
        return closest;
    }

    public static int sum2SortedClosest(int[] nums, int target, int start, int end) {
        int closest = nums[start] + nums[end];
        while (start < end) {
            int sum = nums[start] + nums[end];
            if (sum == target) return sum;
            else if (sum > target) {
                end--;
            } else {
                start++;
            }
            closest = Math.abs(target - closest) < Math.abs(target - sum) ? closest : sum;
        }
        return closest;
    }
=====
15. 3Sum
在数组中找出和为target的三个数的所有组合.
//用的是sum2的方法
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> all = new ArrayList<>();
        if (nums == null || nums.length == 0) return all;
        Arrays.sort(nums);
        for (int first = 0; first < nums.length; first++) {
            if (first != 0 && nums[first] == nums[first - 1]) continue;
            int start = first + 1;
            int end = nums.length - 1;
            while (start < end) {
                int[] find = sum2Sorted(nums, -nums[first], start, end);
                if (find != null) {
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[first]);
                    list.add(nums[find[0]]);
                    list.add(nums[find[1]]);
                    all.add(list);
//特别注意下面这几行.
                    start = find[0] + 1;
                    end = find[1] - 1;
                    while (start < end && nums[start] == nums[start - 1]) start++;
                    while (start < end && nums[end] == nums[end + 1]) end--;
                } else break;
            }
        }
        return all;
    }

    public int[] sum2Sorted(int[] nums, int target, int start, int end) {
        while (start < end) {
            int sum = nums[start] + nums[end];
            if (sum == target) return new int[]{start, end};
            else if (sum > target) end--;
            else start++;
        }
        return null;
    }

=====
11. Container With Most Water
给定n个非负整数a1...an,每个数代表了左边i,ai.绘制n条垂线使得第i条线的两端是
i,ai和i,0.找到两条线,和x轴型形成一个容器,使得容器能装最多的水,不能倾斜容器.
//未排序的情况下且不能排序时.
//从前向后推进 为了目标值
//前后向内推进 寻找最大或最小值
    public int maxArea(int[] height) {
        if (height == null || height.length == 0) return 0;
        int l1 = 0;
        int l2 = height.length - 1;
        int max = cHelper(height, l1, l2);
        while (l1 < l2) {
            int t = cHelper(height, l1, l2);
            if (t > max) max = t;
            if (height[l1] <= height[l2]) {
                l1++;
            } else {
                l2--;
            }
        }
        return max;
    }

    public int cHelper(int[] height, int l1, int l2) {
        int w = l2 - l1;
        return w * Math.min(height[l1], height[l2]);
    }
=====
495. Teemo Attacking
给定一个数组,数组中的元素为攻击的时刻,计算中毒的总时间.
    public static int findPoisonedDuration(int[] timeSeries, int duration) {
        int totlaTime = 0;
        int last = 0;
        for (int i = 0; i < timeSeries.length; i++) {
            if (timeSeries[i] >= last){
                last = timeSeries[i] + duration;
                totlaTime += duration;
            } else {
                int increaseTime = timeSeries[i] - timeSeries[i - 1];
                last += increaseTime;
                totlaTime += increaseTime;
            }
        }
        return totlaTime;
    }
=====
442. Find All Duplicates in an Array
给定一个整形数组,1<=a[i]<=n(数组的长度),一些元素出现两次,其他的出现一次.
找出所有出现两次的元素.
    public static List<Integer> findDuplicates(int[] nums) {
        List<Integer> list = new ArrayList<>();
        if (nums == null || nums.length == 0) return list;

        for (int i = 0; i < nums.length; i++) {
            int index = Math.abs(nums[i]) - 1;
            nums[index] = -nums[index];
            if (nums[index] > 0) list.add(index + 1);
        }
        return list;
    }
=====
560. Subarray Sum Equals K
找到所有的子序列和等于k
//以i为终点满足条件的子序列,只要找到0-i的和减去k等于0-j的和总共有几个j就行.所以保存到i的sum到map中.
    public static int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int count = 0;
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.get(sum - k) != null) {
                count += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
=====
287. Find the Duplicate Number
给定一个数组的数组包含n + 1个整数，每个整数是1和n之间（含），至少有一个重复的数字存在。假设只有一个重复的数字，找到重复的数字。
//使用的是环形链表的思想.
    public int findDuplicate(int[] nums) {
        int index1 = nums[0];
        int index2 = nums[nums[0]];
        while (index1 != index2) {
            index1 = nums[index1];
            index2 = nums[nums[index2]];
        }
        index1 = 0;
        while (index1 != index2) {
            index1 = nums[index1];
            index2 = nums[index2];
        }
        return index1;
    }
=====
238. Product of Array Except Self
给定一个长度为n的整形数组,n > 1,返回一个数组output[i] = 除了nums[i]其他所有数的乘积.O(n)
    public int[] productExceptSelf(int[] nums) {
        int count0 = -1;
        int products = 1;
        for (int i = 0; i < nums.length; i++) {
            if (count0 < 0 && nums[i] == 0) {
                count0 = i;
            } else if (count0 >= 0 && nums[i] == 0) {
                return new int[nums.length];
            } else if (i != nums.length - 1) {
                products *= nums[i];
            }
        }
        int[] output = new int[nums.length];
        if (count0 >= 0) {
            output[count0] = nums[nums.length - 1] == 0 ? products : products * nums[nums.length - 1];
            return output;
        }
        output[nums.length - 1] = products;
        for (int i = nums.length - 2; i >= 0; i--) {
            products = products / nums[i] * nums[i + 1];
            output[i] = products;
        }
        return output;
    }
=====
229. Majority Element II
给定一个大小为n的数组,找到所有出现超过[n/3]次数的元素
//用两个计数器
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        if (nums == null || nums.length == 0) return list;
        int mt = nums.length / 3;
        int c1 = 0, c2 = 0;
        int n1 = nums[0], n2 = nums[0];
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == n1) c1++;
            else if (nums[i] == n2) c2++;
            else if (c1 == 0) {
                n1 = nums[i];
                c1 = 1;
            } else if (c2 == 0) {
                n2 = nums[i];
                c2 = 1;
            } else {
                c1--;
                c2--;
            }
        }

        c1 = c2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == n1) c1++;
            else if (nums[i] == n2) c2++;
        }
        if (c1 > mt) list.add(n1);
        if (c2 > mt) list.add(n2);
        return list;
    }
=====
228. Summary Ranges
给定一个排序的没有重复的整形数组,返回它的范围.
    public List<String> summaryRanges(int[] nums) {
        List<String> list = new ArrayList<>();
        if (nums == null || nums.length == 0) return list;
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1] + 1) {
                end = nums[i];
            } else {
                if (start == end) list.add(String.valueOf(start));
                else list.add(start + "->" + end);
                start = end = nums[i];
            }
        }
        if (start == end) list.add(String.valueOf(start));
        else list.add(start + "->" + end);
        return list;
    }
=====
216. Combination Sum III
找到所有k个数组成的组合的和等于n,只能用1-9
//回溯法
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> all = new ArrayList<>();
        if (n < 0) return all;
        sumHelper(k, n, 0, 1, all, new ArrayList<>());
        return all;
    }

    public void sumHelper(int k, int remain, int t, int start, List<List<Integer>> all, List<Integer> template) {
        if (t == k && remain == 0) {
            all.add(template);
            return;
        } else if (t == k && remain != 0) {
            return;
        }
        for (int i = start; i <= 9; i++) {
            List<Integer> tmp = new ArrayList<>(template);
            tmp.add(i);
            sumHelper(k, remain - i, t + 1, i + 1, all, tmp);
        }
    }

=====
128. Longest Consecutive Sequence
找到数组中连续数的最大长度.
    public int longestConsecutive(int[] nums) {
        int count = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int n : nums) {
            if (!map.containsKey(n)) {
                int left = map.getOrDefault(n - 1, 0);
                int right = map.getOrDefault(n + 1, 0);
                int sum = left + right + 1;
                map.put(n, sum);
                map.put(n - left, sum);
                map.put(n + right, sum);
                if (sum > count) count = sum;
            }
        }
        return count;
    }
======




























